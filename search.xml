<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ceph从入门到放弃</title>
      <link href="/2022/10/13/ceph%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
      <url>/2022/10/13/ceph%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus从入门到放弃</title>
      <link href="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
      <url>/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013012956835.png" alt="image-20221013012956835"></p><h3 id="5-7：alertmanager-高可用"><a href="#5-7：alertmanager-高可用" class="headerlink" title="5.7：alertmanager 高可用"></a>5.7：alertmanager 高可用</h3><h4 id="5-7-1：单机："><a href="#5-7-1：单机：" class="headerlink" title="5.7.1：单机："></a>5.7.1：单机：</h4><p>  大部分使用alertmanager组件的时候，都是用的单点架构，架构图如下图</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013194818842.png" alt="image-20221013194818842"></p><h4 id="5-7-2：基于负载均衡："><a href="#5-7-2：基于负载均衡：" class="headerlink" title="5.7.2：基于负载均衡："></a>5.7.2：基于负载均衡：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013194926980.png" alt="image-20221013194926980"></p><h4 id="5-7-3：基于-Gossip-机制："><a href="#5-7-3：基于-Gossip-机制：" class="headerlink" title="5.7.3：基于 Gossip 机制："></a>5.7.3：基于 Gossip 机制：</h4><p><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability">https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alertmanager 引入了 Gossip 机制。Gossip 机制为多个 Alertmanager 之间提供了信息传递的机制。确保及时在多个 Alertmanager 分别接收到相同告警信息的情况下，并且只有一个告警通知被发送给 Receiver。</span><br><span class="line">集群环境搭建：</span><br><span class="line">为了能够让 Alertmanager 节点之间进行通讯，需要在 Alertmanager 启动时设置相应的参数。其中主要的参数包括：</span><br><span class="line">--cluster.listen-address string: 当前实例集群服务监听地址</span><br><span class="line">--cluster.peer value: 初始化时关联的其它实例的集群服务地址</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013200044785.png" alt="image-20221013200044785"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrometheusAlert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus、Zabbix，日志系统 Graylog2，Graylog3、数据可视化系统 Grafana、SonarQube，阿里云-云监控，以及所有支持 WebHook接口的系统发出的预警消息，支持将收到的这些消息发送到钉钉，微信，email，飞书，腾讯短信，腾讯电话，阿里云短信，阿里云电话，华为短信，百度云短信，容联云电话，七陌短信，七陌语音，TeleGram，百度 Hi(如流)等。</span><br></pre></td></tr></table></figure><p><a href="https://github.com/feiyu563/PrometheusAlert">https://github.com/feiyu563/PrometheusAlert</a></p><h2 id="六：pushgateway："><a href="#六：pushgateway：" class="headerlink" title="六：pushgateway："></a>六：pushgateway：</h2><p><a href="https://github.com/prometheus/pushgateway">https://github.com/prometheus/pushgateway</a></p><h3 id="6-1：pushgateway-简介："><a href="#6-1：pushgateway-简介：" class="headerlink" title="6.1：pushgateway 简介："></a>6.1：pushgateway 简介：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pushgateway 是采用被动推送的方式，而不是类似于 prometheus server 主动连接 exporter 获取监控数据。</span><br><span class="line">pushgateway 可以单独运行在一个节点，然后需要自定义监控脚本把需要监控的主动推送给 pushgateway的 API 接口，然后 pushgateway 再等待 prometheus server 抓取数据，即 pushgateway 本身没有任何抓取监控数据的功能，目前 pushgateway 只是被动的等待数据从客户端推送过来。</span><br><span class="line">--persistence.file=&quot;&quot; #数据保存的文件，默认只保存在内存中</span><br><span class="line">--persistence.interval=5m #数据持久化的间隔时间</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013220953837.png" alt="image-20221013220953837"></p><h3 id="6-2：部署-pushgateway："><a href="#6-2：部署-pushgateway：" class="headerlink" title="6.2：部署 pushgateway："></a>6.2：部署 pushgateway：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####二进制部署</span></span><br><span class="line"><span class="comment"># tar -xf pushgateway-1.4.3.linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment">#ln -sv pushgateway-1.4.3.linux-amd64 pushgateway</span></span><br><span class="line"><span class="comment"># ls -l pushgateway</span></span><br><span class="line">lrwxrwxrwx 1 root root 29 Oct 13 14:22 pushgateway -&gt; pushgateway-1.4.3.linux-amd64</span><br><span class="line"><span class="comment">#cd pushgateway</span></span><br><span class="line"><span class="comment"># nohup ./pushgateway --help./pushgateway --web.listen-address=&quot;0.0.0.0:9091&quot; --persistence.file=&quot;/data/pushgateway&quot; &amp; </span></span><br><span class="line"><span class="comment"># ss -ntlp |grep 9091</span></span><br><span class="line">LISTEN   0         128                       *:9091                   *:*        <span class="built_in">users</span>:((<span class="string">&quot;pushgateway&quot;</span>,pid=5125,fd=3))</span><br><span class="line"></span><br><span class="line"><span class="comment">###容器部署</span></span><br><span class="line"><span class="comment"># docker load -i pushgateway.tar.gz</span></span><br><span class="line"><span class="comment"># docker run -d --name pushgateway -p 9091:9091 prom/pushgateway</span></span><br></pre></td></tr></table></figure><h3 id="6-3：prometheus-到-pushgateway-采集数据："><a href="#6-3：prometheus-到-pushgateway-采集数据：" class="headerlink" title="6.3：prometheus 到 pushgateway 采集数据："></a>6.3：prometheus 到 pushgateway 采集数据：</h3><h4 id="6-3-1：验证-pushgateway："><a href="#6-3-1：验证-pushgateway：" class="headerlink" title="6.3.1：验证 pushgateway："></a>6.3.1：验证 pushgateway：</h4><p>pushgateway自身带有metrics指标</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013223944880.jpg" alt="image-20221013223944880"></p><h4 id="6-3-2：prometheus-配置数据采集："><a href="#6-3-2：prometheus-配置数据采集：" class="headerlink" title="6.3.2：prometheus 配置数据采集："></a>6.3.2：prometheus 配置数据采集：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim prometheus-cfg.yaml</span></span><br><span class="line">  - job_name: <span class="string">&#x27;pushgateway-monitor&#x27;</span></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&#x27;192.168.3.60:9091&#x27;</span>]</span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#./promtool  check config prometheus.yml </span></span><br><span class="line">Checking prometheus.yml</span><br><span class="line">  SUCCESS: 2 rule files found</span><br><span class="line"> SUCCESS: prometheus.yml is valid prometheus config file syntax</span><br><span class="line"></span><br><span class="line"><span class="comment"># honor_labels 控制Prometheus如何处理已经存在于已抓取数据中的标签与Prometheus将附加服务器端的标签之间的冲突（&quot;job&quot;和&quot;instance&quot;标签，手动配置的目标标签以及服务发现实现生成的标签）。</span></span><br><span class="line"><span class="comment"># 如果 honor_labels 设置为&quot;true&quot;，则通过保留已抓取数据的标签值并忽略冲突的服务器端标签来解决标签冲突。</span></span><br><span class="line"><span class="comment"># 如 果 honor_labels 设 置 为 &quot;false&quot; ， 则 通 过 将 已 抓 取 数 据 中 的 冲 突 标 签 重 命 名 为 &quot;exported_ &lt;original-label&gt;&quot;（例如&quot;exported_instance&quot;，&quot;exported_job&quot;）然后附加服务器端标签来解决标签冲突</span></span><br><span class="line"><span class="comment">#这里设置为true保留原标签</span></span><br><span class="line">容器prometueus重新applyyaml文件</span><br><span class="line"><span class="comment"># kubectl apply -f prometheus-cfg.yaml &amp;&amp; kubectl delete -f prometheus-deploy.yaml &amp;&amp; kubectl apply -f prometheus-deploy.yaml</span></span><br><span class="line">二进制prometheus重启服务（开启了热加载也可通过热加载方式生效）</span><br><span class="line"><span class="comment">#systeemctl restart prometheus</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3：验证数据："><a href="#6-3-3：验证数据：" class="headerlink" title="6.3.3：验证数据："></a>6.3.3：验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013230016435.png" alt="image-20221013230016435"></p><h3 id="6-4：测试从客户端推送单条数据："><a href="#6-4：测试从客户端推送单条数据：" class="headerlink" title="6.4：测试从客户端推送单条数据："></a>6.4：测试从客户端推送单条数据：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">要 Push 数据到 PushGateway 中，可以通过其提供的 API 标准接口来添加，默认 URL 地址为：</span><br><span class="line">http://&lt;ip&gt;:9091/metrics/job/&lt;JOBNAME&gt;&#123;/&lt;LABEL_NAME&gt;/&lt;LABEL_VALUE&gt;&#125;，</span><br><span class="line">其中&lt;JOBNAME&gt;是必填项，为 job 标签值，后边可以跟任意数量的标签对，一般我们会添加一个</span><br><span class="line">instance/&lt;INSTANCE_NAME&gt;实例名称标签，来方便区分各个指标。</span><br><span class="line">推送一个 job 名称为 mytest_job，key 为 mytest_metric 值为 2022</span><br><span class="line"><span class="comment"># echo &quot;mytest_metric 2022&quot; | curl --data-binary @- http://192.168.3.60:9091/metrics/job/mytest_job</span></span><br><span class="line"><span class="comment"># echo &quot;mytest_metric 2026&quot; | curl --data-binary @- http://192.168.3.60:9091/metrics/job/mytest_job</span></span><br></pre></td></tr></table></figure><h4 id="6-4-2：pushgateway-验证数据："><a href="#6-4-2：pushgateway-验证数据：" class="headerlink" title="6.4.2：pushgateway 验证数据："></a>6.4.2：pushgateway 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013233006526.png" alt="image-20221013233006526"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">除了 mytest_metric 外，同时还新增了 push_time_seconds 和 push_failure_time_seconds 两个指标，</span><br><span class="line">这两个是 PushGateway 自动生成的指标, 分别用于记录指标数据的成功上传时间和失败上传时间。</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013233830439.png" alt="image-20221013233830439"></p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013234337270.png" alt="image-20221013234337270"></p><h3 id="6-5：测试从客户端推送多条数据："><a href="#6-5：测试从客户端推送多条数据：" class="headerlink" title="6.5：测试从客户端推送多条数据："></a>6.5：测试从客户端推送多条数据：</h3><h4 id="6-5-1：推送多条数据："><a href="#6-5-1：推送多条数据：" class="headerlink" title="6.5.1：推送多条数据："></a>6.5.1：推送多条数据：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat &lt;&lt;EOF | curl --data-binary @- http://192.168.3.60:9091/metrics/job/test_job/instance/192.168.3.60</span></span><br><span class="line"><span class="comment">#TYPE node_memory_usage gauge</span></span><br><span class="line">node_memory_usage 4311744512</span><br><span class="line"><span class="comment"># TYPE memory_total gauge</span></span><br><span class="line">node_memory_total 103481868288</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="6-5-2：pushgateway-验证数据："><a href="#6-5-2：pushgateway-验证数据：" class="headerlink" title="6.5.2：pushgateway 验证数据："></a>6.5.2：pushgateway 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013234825665.jpg" alt="image-20221013234825665"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#job可以理解为prometheus中的job，而job后添加label相当于添加了target，再往下则是指标数据</span></span><br><span class="line"><span class="comment">#pushgateway是被动接受数据，并且是prometheus server 主动拉取数据，相当于一个指标数据中转站</span></span><br></pre></td></tr></table></figure><h4 id="6-5-3：prometheus-server-验证数据："><a href="#6-5-3：prometheus-server-验证数据：" class="headerlink" title="6.5.3：prometheus server 验证数据："></a>6.5.3：prometheus server 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/image-20221013235303817.png" alt="image-20221013235303817"></p><h3 id="6-6：自定义收集数据："><a href="#6-6：自定义收集数据：" class="headerlink" title="6.6：自定义收集数据："></a>6.6：自定义收集数据：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat mem_monitor.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">total_memory=$(free |awk <span class="string">&#x27;/Mem/&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">used_memory=$(free |awk <span class="string">&#x27;/Mem/&#123;print $3&#125;&#x27;</span>)job_name=<span class="string">&quot;custom_memory_monitor&quot;</span></span><br><span class="line">instance_name=`ifconfig eth0 | grep -w inet | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>` pushgateway_server=<span class="string">&quot;http://192.168.3.60:9091/metrics/job&quot;</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | curl --data-binary @- $&#123;pushgateway_server&#125;/$&#123;job_name&#125;/instance/$&#123;instance_name&#125;</span></span><br><span class="line"><span class="string">#TYPE custom_memory_total gauge</span></span><br><span class="line"><span class="string">custom_memory_total $total_memory</span></span><br><span class="line"><span class="string">#TYPE custom_memory_used gauge</span></span><br><span class="line"><span class="string">custom_memory_used $used_memory</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">分别在不同主机执行脚本，验证指标数据收集和推送：</span><br><span class="line"><span class="comment"># bash mem_monitor.sh</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/12/hello-world/"/>
      <url>/2022/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
