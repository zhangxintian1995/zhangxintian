<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ceph从入门到放弃上</title>
      <link href="/2022/10/16/ceph%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8A/"/>
      <url>/2022/10/16/ceph%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> ceph </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking简介上</title>
      <link href="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/"/>
      <url>/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一：分布式链路追踪系统简起源：<br> 在较大型的web集群和微服务环境中，客户端的一次请求可能需要经过多个不同的模块、多个不同中间件、多台不同机器的一起相互协作才能处理完成客户端的请求，而在这一系列的请求过程之中，处理流程可能是串行执行也可能是并行执行的，那么如何确定客户端的一次请求到结束的背后究竟调用了哪些应用以及哪些模块并经过了哪些节点，且每个模块的调用先后顺序是怎样的、每个模块的处理相应性能如何？后期随着业务系统的不断增多，业务处理逻辑会越来越复杂，而分布式系统中急需一套链路追踪（Trace）系统来解决这些痛点，从而让运维人员对整个业务系统一目了然、了如指掌。<br> 分布式服务跟踪系统是整个分布式系统中跟踪一个用户请求的完整过程，包括数据采集、数据传输、数据存储、数据分析和数据可视化，获取并存储和分享此类跟踪可以让运维清晰了解用户请求与业务系统交互背后的整个调用链的调用关系，链路追踪系统是针对调试和监控微服务不可或缺的好帮手。</p><p>链路追踪系统的起源：</p><p>Dapper是google公司在2008年就开始内部使用经过生产环境验证的链路追踪系统。<br> 2010年Google 发布的Dapper论文，&lt;&lt;Dapper, a Large-Scale Distributed Systems Tracing<br>Infrastructure (2010)&gt;&gt;<br> <a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-">https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-</a> 2010-1.pdf</p><p>链路追踪系统的起源：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016193217053.png" alt="image-20221016193217053"></p><p>面临的业务环境：</p><p>业务系统是使用复杂的、大规模的分布式集群实现，并且有服务很多服务组成。<br>每个服务可能使用不同的软件模块或开发框架。<br>每个服务可能使用不同的编程语言开发。<br>服务可能运行在数千台服务器，并且分布在不同的数据中心运行，对管理和监控产生挑战。<br>因此需要有专门的工具去跟踪请求、理解整体系统的瓶颈和实时的表现，假如一个请求太慢，那么<br>要通过工具可以快速的找到问题所在。</p><p>面临的业务环境：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016193728306.png" alt="image-20221016193728306"></p><p>针对dapper的设计要求：</p><p>1：无处不在的部署：<br>任何服务都应该被监控到，任何服务出问题都要做到有据可查。<br>2：持续的监控<br>做到7*24小时全天候监控，任何时候出了问题都要基于监控数据追踪问题根源。</p><p>针对dapper的设计目标：</p><p>1.低消耗：<br>dapper跟踪系统对服务的影响应该做到最小，在一些高并发的场合，即使很小的影响也可能会导致服务出现延迟、负载变高或不可用，从而导致业务团队可能会停止dapper系统。<br>2.对应用透明：<br>应用程序对dapper系统无感知甚至不知道dapper系统的存在，假如一个跟踪系统必须依赖于应用的开发者配合才能实现跟踪，也即是需要在应用中植入跟踪代码，那么可能会因为代码产生bug或导致应用出问题。<br>3.可伸缩性：<br>针对未来众多的服务和大规模业务集群，dapper系统应该能满足未来在性能的压力和功能上的需求。</p><p>dapper介绍-请求链路：</p><p>图中展现的是一个有5台服务器相关的一个服务，包括：前端（A），两个中间层（B和C），以及两个后端（D和E），当一个用户（这个用例的发起人）发起一个请求时，首先到达前端（A），然后发送两个RPC到服务器B和C，B收到请求后会马上做出响应，但是C需要和后端的D和E交互之后再返还给A，由A来响应最初的客户请求，对于这样一个请求，简单实用的分布式跟踪的实现，就是为服务器上每一次发送和接收动作来收集跟踪标识符(message identifiers)和时间戳(timestamped events)。</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016194120057.png" alt="image-20221016194120057"></p><p>dapper介绍-数据采集方法：</p><p>分布式追踪的设计方案主要可以分为两类：<br>黑盒法（black-box）和标记法（annotation-based）<br>黑盒法：<br>黑盒法无需任何侵入性代码，它的优势在于无需修改代码，缺点在于记录不是很准确，且需要大量数据才能够推导出服务间的关系。<br>标记法：<br>标记法需要为每个请求打标记，并通过一个全局标识符将请求途径的所有服务信息串联，复盘整个链路。标记法记录准确，但它的缺点也很明显，需要将标记代码注入到每个服务中。在 Google 内部，几乎所有应用都使用相同的 threading model、control flow 和 RPC systems，因此可以将打标记的工作集中在少量的公共库中，同样能够达到对应用透明的效果。</p><p>dapper介绍-跟踪树和span：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016194646375.png" alt="image-20221016194646375"></p><p>dapper介绍-跟踪树和span：</p><p>任何一个span可以包含来自不同的主机信息，这些也要记录下来，事实上每一个RPC span可以包含客户端和服务器两个过程的注释，使得链接两个主机的span会成为图中所说的span，由于客户端和服务器上的时间戳来自不同的主机，还必须考虑到时间偏差，在分析工具就利用了时间偏差，即RPC客户端发送一个请求之后，服务器端才能接收到，对于响应也是一样的（服务器先响应，然后客户端才能接收到这个响应），这样一来，服务器端的RPC就有一个时间戳的一个开始和结束，然后就可以计算出时间损耗。</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016200604043.png" alt="image-20221016200604043"></p><p>dapper介绍-traceid 、spanid、parentid示意图：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016200631888.png" alt="image-20221016200631888"></p><p>dapper介绍-植入点：</p><p>Dapper可以实现对应用开发者近乎零浸入的成本对分布式请求链路进行跟踪，主要通过通用组件库实现：<br>当一个线程在处理跟踪请求链路的过程中，Dapper把这次跟踪的上下文的在ThreadLocal中进行存储，追踪上下文是一个小而且容易复制的空间，其中记录了Span的属性信息，比如跟踪ID和span ID。<br>当用户的请求处理过程是延迟调用的或是异步的，大多数Google开发者通过线程池或其他执行器，使用一个通用的控制流库来回调，Dapper确保所有这样的回调可以存储这次跟踪的上下文，而当回调函数被触发时，这次跟踪的上下文会与适当的线程关联上。在这种方式下，Dapper可以使用trace ID和span ID来辅助构建异步调用的路径。<br>几乎所有的Google的进程间通信是建立在一个用C++和Java开发的RPC框架上。我们把跟踪植入该框架来定义RPC中所有的span，span的ID和跟踪的ID会从客户端发送到服务端，像那样的基于RPC的系统被广泛使用在Google中，这是一个重要的植入点，当那些非RPC通信框架发展成熟并找到了自己的用户群之后，我们会计划对RPC通信框架进行植入。</p><p>dapper介绍-Annotation：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016201849694.png" alt="image-20221016201849694"></p><p>dapper介绍-采样率:</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016201916371.png" alt="image-20221016201916371"></p><p>dapper介绍-跟踪的代价：</p><p>在生产环境的跟踪数据处理中，dapper的守护进程从来没有超过0.3%的单核cpu使用率，而且只有很少量的内存使用，另外还限制了Dapper守护进程为内核scheduler最低的优先级，以防在一台高负载的服务器上发生cpu竞争。<br>Dapper也是一个带宽资源的轻量级的消费者，每一个span在我们的仓库中传输只占用了平均426的byte，作为网络行为中的极小部分，Dapper的数据收集在Google的生产环境中的只占用了0.01%的网络资源。<br>创建root span: 204纳秒，创建一般的span: 176纳秒<br>建立一个annonation: 40纳秒<br>写到本地磁盘<br>Dapper本地进程：&lt;0.3% CPU, &lt; 0.01% 网络</p><p>dapper介绍-Dapper应用场景：</p><p>性能分析：开发人员针对请求延迟的目标进行跟踪，并对容易优化的地方进行定位。<br>正确性分析：发现一些只读请求应该是访问从库但是却访问了主库等类似业务场景。<br>理解系统：全局优化系统，理解每个查询的整体代价。<br>测试新版本：发现新版本的bug和性能问题。<br>解决依赖关系：找到服务之间的依赖关系。</p><h2 id="二：分布式链路追踪系统简简介"><a href="#二：分布式链路追踪系统简简介" class="headerlink" title="二：分布式链路追踪系统简简介"></a>二：分布式链路追踪系统简简介</h2><p>APM概述:</p><p>APM 系统（Application Performance Management，即应用性能管理）</p><p>早期APM工具功能比较单一，主要以监控CPU使用率、I&#x2F;O、内存资源、网速等网络基础设施为主(cacti、nagios)后来随着中间件技术的不断发展，APM也开始监控缓存、数据库、MQ等各种基础组件的性能(zabbix、prometheus)</p><p>微服务兴起之后，系统功能被模块化，再加上k8s与容器化的兴起及应用数量的爆炸式增长，各模块和服务之的调用链路、响应时间、负载等越来越不好通过传统的工具进行监控和统计，此时APM系统诞生了(应运而生)。</p><p>APM项目：</p><p>1.CAT： 由国内美团点评开源的，基于Java语言开发，目前提供Java、C&#x2F;C++、Node.js、Python、Go等语言的客户端，监控数据会全量统计，国内很多公司在用，例如美团点评、携程、拼多多等，CAT需要开发人员手动在应用程序中埋点，对代码侵入性比较强。<br>2.Zipkin： 由Twitter公司开发并开源，基于Java 语言实现，侵入性相对于CAT要低一点，需要对web.xml等相关配置文件进行修改，但依然对系统有一定的侵入性，Zipkin可以轻松与Spring Cloud进行集成，也是SpringCloud推荐的APM系统。<br>3.jaeger 是Uber推出的一款开源分布式追踪系统，主要使用go语言开发，对业务代码侵入性较少。<br>4.Pinpoint： 韩国团队开源的APM产品，运用了字节码增强技术，只需要在启动时添加启动参数即可实现APM功能，对代码无侵入，目前支持Java和 PHP语言，底层采用HBase来存储数据，探针收集的数据粒度非常细，但性能损耗较大，因其出现的时间较长，完成度也很高，文档也较为丰富，应用的公司较多。</p><p>5.SkyWalking： Skywalking是由国内开源爱好者吴晟开源并提交到Apache孵化器的开源项目，2017年12月SkyWalking成为Apache国内首个个人孵化项目，2019年4月17日SkyWalking从Apache基金会的孵化器毕业成为顶级项目，目前SkyWalking支持Java、.Net、Node.js、go、python等探针，数据存储支持MySQL、ElasticSearch等，SkyWalking与Pinpoint相同，对业务代码无侵入，不过探针采集数据粒度相较于Pinpoint来说略粗，但性能表现优秀，目前SkyWalking增长势头强劲，社区活跃，中文文档齐全，没有语言障碍，支持多语言探针，这些都是 SkyWalking的优势所在，还有就是SkyWalking支持很多框架，包括很多国产框架，例如，Dubbo、gRPC、SOFARPC 等等，同时也有很多开发者正在不断向社区提供更多插件以支持更多组件无缝接入SkyWalking。</p><p>6.开源的：piwik等 #<a href="http://blogs.studylinux.net/?p=750">http://blogs.studylinux.net/?p=750</a><br>7.商业的：百度统计&#x2F;growingio等</p><p>OpenTracing规范：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016203857965.png" alt="image-20221016203857965"></p><p>OpenTracing Data Model-Trace：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016204301238.png" alt="image-20221016204301238"></p><p>OpenTracing Data Model-Span：</p><p>Span 代表系统中具有开始时间和执行时长的请求跨度，Span之间通过嵌套或者顺序排列建立逻辑因果关系。<br>每个Span中可以包含以下的信息：<br>操作名称：例如访问的具体 RPC 服务，访问的 URL 地址等；<br>起始时间；<br>结束时间；<br>Span Tag：一组键值对构成的 Span 标签集合，其中键必须为字符串类型，值可以是字符串、bool 值或者数字；<br>Span Log：一组 Span 的日志集合；<br>SpanContext：Trace 的全局上下文信息；<br>References：Span 之间的引用关系，下面详细说明 Span 之间的引用关系；<br>Span的请求会产生logs，logs会携带一个时间戳以及一个可选的附加信息。</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016204741588.png" alt="image-20221016204741588"></p><p>OpenTracing Data Model-Tags：</p><p>每个 Span 可以有多个键值对形式的 Tags，Tags 是没有时间戳的，只是为 Span 添加一些简单解释<br>和补充信息</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016204954584.png" alt="image-20221016204954584"></p><p>APM对比：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016205015600.png" alt="image-20221016205015600"></p><p>skywalking 简介-特点：</p><p>实现从请求跟踪、指标收集和日志记录的完整信息记录。<br>多语言自动探针，支持Java、GO、Python、PHP、NodeJS、LUA、Rust等客户端。<br>内置服务网格可观察性，支持从Istio+Envoy Service Mesh收集和分析数据。<br>模块化架构，存储、集群管理、使用插件集合都可以进行自由选择。<br>支持告警。<br>优秀的可视化效果。</p><p>kywalking 简介-组件：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016205730486.png" alt="image-20221016205730486"></p><p>kywalking 简介-组件：</p><p>OAP平台(Observability Analysis Platform，可观测性分析平台)或OAP Server，它是一个高度件化的轻量级分析程序，由兼容各种探针Receiver、流式分析内核和查询内核三部分构成。<br>探针：基于无侵入式的收集，并通过HTTP或者gRPC方式发送数据到OAP Server。<br>存储实现(Storage Implementors)，SkyWalking OAP Server支持多种存储实现并且提供了标准接口，可支持不同<br>的存储后端。<br>UI模块(SkyWalking)，通过标准的GraphQL(Facebook在2012年开源)协议进行统计数据查询和展示 。</p><p>设计模式</p><p>面向协议设计：面向协议设计是SkyWalking从5.x开始严格遵守的首要设计原则，组件之间使用标准的协议进行数据交互。</p><p>协议有探针协议和查询协议</p><p>探针协议：</p><p>探针上报协议：协议包括语言探针的注册、Metrics数据上报、Tracing数据据上报等标准，Java、Go等探针都需要严格遵守此协议的标准。<br>探针交互协议：因为分布式追踪环境，探针间需要借助HTTP Header、MQ Header在应用之间进行通信和交互，探针交互协议就定义了交互的数据格式。<br>Service Mesh协议：是SkyWalking对Service Mesh抽象的专有协议，任何Mesh类的服务都可以通过此协议直接上传指标数据，用于计算服务的指标数据和绘制拓扑图。<br>第三方协议： 对大型的第三方开源项目 尤其是Service Mesh核心平台Istio和Envoy,提供核心协议适配，支持针对Istio+Envoy Service Mesh进行无缝对接。</p><p>数据查询协议：</p><p>元数据查询：查询在SkyWalking注册的服务、服务实例、Endpoint等元数据信息。<br>拓扑关系查询：查询全局、或者单个服务、Endpoint的拓扑图及依赖关系。<br>Metrics指标查询： 查询指标数据。<br>聚合指标查询：区间范围均值查询及Top N排名数据查询等。<br>Trace查询：追踪数据的明细查询。<br>告警查询：基于表达式，判断指标数据是否超出阈值。</p><p>skywalking 设计：</p><p>模块化设计：<br>探针收负责集数据<br>前端负责展示数据<br>OAP Server负责从后端存储读写数据<br>后端存储负责持久化数据</p><p>轻量化设计：<br>SkyWalking在设计之初就提出了轻量化的设计理念，SkyWalking使用最轻量级的jar包模式，实现强大的数据处理和分析能力、可扩展能力和模块化能力。</p><p>skywalking 优势：<br>兼容性好：<br>支持传统的分部署架构dubbo和spring cloud，也支持云原生中的Istio和envoy。<br>易于部署和后期维护<br>组件化，可以自定义部署，后期横向扩容简单<br>高性能<br>每天数T的数据无压力<br>易于二次开发<br>标准的http和grpc协议，开源的项目，企业可以自主二次开发</p><h2 id="三：部署skywalking"><a href="#三：部署skywalking" class="headerlink" title="三：部署skywalking"></a>三：部署skywalking</h2><p>二进制部署-架构规划：</p><p>skywalking-ui: 前端服务,端口号8080。<br>skywalking-oap(Observability Analysis Platform)：可观测性分析平台,11800为数据写入端口，12800为</p><p>查询端口。<br>es7：9200为elasticsearch的数据读写端口，skywalking支持的存储有elasticsearch、h2、mysql、<br>tidb、influxdb、postgresql等。<br>agent: app服务器部署skywalking agent，用于收集app中的访问请求。</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016213059072.png" alt="image-20221016213059072"></p><p>二进制部署-部署elasticsearch：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@skywalking-es:~<span class="comment"># dpkg -i elasticsearch-7.10.1-amd64.deb</span></span><br><span class="line">root@skywalking-es:~<span class="comment"># vim /etc/elasticsearch/elasticsearch.yml</span></span><br><span class="line">cluster.name: skywalking-es-cluster</span><br><span class="line">node.name: node1</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line">network.host: 192.168.3.80</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;192.168.3.80&quot;</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;192.168.3.80&quot;</span>]</span><br><span class="line">root@skywalking-es:~<span class="comment"># systemctl restart elasticsearch.service</span></span><br><span class="line">root@skywalking-es:~<span class="comment"># systemctl enable elasticsearch.service</span></span><br></pre></td></tr></table></figure><p>二进制部署-验证elasticsearch：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016220513894.png" alt="image-20221016220513894"></p><p>二进制部署-部署skywalking server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@skywalking-server:~<span class="comment"># apt install openjdk-11-jdk -y</span></span><br><span class="line">root@skywalking-server:~<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">root@skywalking-server:~<span class="comment"># tar xvf apache-skywalking-apm-es7-8.6.0.tar.gz</span></span><br><span class="line">root@skywalking-server:~<span class="comment"># cd apache-skywalking-apm-bin-es7/</span></span><br><span class="line">root@skywalking-server:~/apache-skywalking-apm-bin-es7<span class="comment"># vim config/application.yml</span></span><br><span class="line">修改存储：</span><br><span class="line">111 storage:</span><br><span class="line">112 selector: <span class="variable">$&#123;SW_STORAGE:elasticsearch7&#125;</span></span><br><span class="line">139 elasticsearch7: </span><br><span class="line">140 nameSpace: <span class="variable">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">141 clusterNodes: <span class="variable">$&#123;SW_STORAGE_ES_CLUSTER_NODES:192.168.3.81:9200&#125;</span></span><br><span class="line">root@skywalking-server:~/apache-skywalking-apm-bin-es7<span class="comment"># ./bin/startup.sh</span></span><br><span class="line">SkyWalking OAP started successfully!</span><br><span class="line">SkyWalking Web Application started successfully!</span><br><span class="line"><span class="comment">#注意修改行数</span></span><br></pre></td></tr></table></figure><p>二进制部署-验证elasticsearch数据：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016230448486.png" alt="image-20221016230448486"></p><p>二进制部署-验证skywalking server：</p><p><img src="/2022/10/16/skywalking%E7%AE%80%E4%BB%8B%E4%B8%8A/image-20221016230516060.png" alt="image-20221016230516060"></p><p>二进制部署-验证skywalking server：(略)</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> k8s </tag>
            
            <tag> skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus从入门到放弃下</title>
      <link href="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/"/>
      <url>/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="5-7：alertmanager-高可用"><a href="#5-7：alertmanager-高可用" class="headerlink" title="5.7：alertmanager 高可用"></a>5.7：alertmanager 高可用</h3><h4 id="5-7-1：单机："><a href="#5-7-1：单机：" class="headerlink" title="5.7.1：单机："></a>5.7.1：单机：</h4><p>  大部分使用alertmanager组件的时候，都是用的单点架构，架构图如下图</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013194818842.png" alt="image-20221013194818842"></p><h4 id="5-7-2：基于负载均衡："><a href="#5-7-2：基于负载均衡：" class="headerlink" title="5.7.2：基于负载均衡："></a>5.7.2：基于负载均衡：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013194926980.png" alt="image-20221013194926980"></p><h4 id="5-7-3：基于-Gossip-机制："><a href="#5-7-3：基于-Gossip-机制：" class="headerlink" title="5.7.3：基于 Gossip 机制："></a>5.7.3：基于 Gossip 机制：</h4><p><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability">https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alertmanager 引入了 Gossip 机制。Gossip 机制为多个 Alertmanager 之间提供了信息传递的机制。确保及时在多个 Alertmanager 分别接收到相同告警信息的情况下，并且只有一个告警通知被发送给 Receiver。</span><br><span class="line">集群环境搭建：</span><br><span class="line">为了能够让 Alertmanager 节点之间进行通讯，需要在 Alertmanager 启动时设置相应的参数。其中主要的参数包括：</span><br><span class="line">--cluster.listen-address string: 当前实例集群服务监听地址</span><br><span class="line">--cluster.peer value: 初始化时关联的其它实例的集群服务地址</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013200044785.png" alt="image-20221013200044785"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrometheusAlert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus、Zabbix，日志系统 Graylog2，Graylog3、数据可视化系统 Grafana、SonarQube，阿里云-云监控，以及所有支持 WebHook接口的系统发出的预警消息，支持将收到的这些消息发送到钉钉，微信，email，飞书，腾讯短信，腾讯电话，阿里云短信，阿里云电话，华为短信，百度云短信，容联云电话，七陌短信，七陌语音，TeleGram，百度 Hi(如流)等。</span><br></pre></td></tr></table></figure><p><a href="https://github.com/feiyu563/PrometheusAlert">https://github.com/feiyu563/PrometheusAlert</a></p><h2 id="六：pushgateway："><a href="#六：pushgateway：" class="headerlink" title="六：pushgateway："></a>六：pushgateway：</h2><p><a href="https://github.com/prometheus/pushgateway">https://github.com/prometheus/pushgateway</a></p><h3 id="6-1：pushgateway-简介："><a href="#6-1：pushgateway-简介：" class="headerlink" title="6.1：pushgateway 简介："></a>6.1：pushgateway 简介：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pushgateway 是采用被动推送的方式，而不是类似于 prometheus server 主动连接 exporter 获取监控数据。</span><br><span class="line">pushgateway 可以单独运行在一个节点，然后需要自定义监控脚本把需要监控的主动推送给 pushgateway的 API 接口，然后 pushgateway 再等待 prometheus server 抓取数据，即 pushgateway 本身没有任何抓取监控数据的功能，目前 pushgateway 只是被动的等待数据从客户端推送过来。</span><br><span class="line">--persistence.file=&quot;&quot; #数据保存的文件，默认只保存在内存中</span><br><span class="line">--persistence.interval=5m #数据持久化的间隔时间</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013220953837.png" alt="image-20221013220953837"></p><h3 id="6-2：部署-pushgateway："><a href="#6-2：部署-pushgateway：" class="headerlink" title="6.2：部署 pushgateway："></a>6.2：部署 pushgateway：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####二进制部署</span></span><br><span class="line"><span class="comment"># tar -xf pushgateway-1.4.3.linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment">#ln -sv pushgateway-1.4.3.linux-amd64 pushgateway</span></span><br><span class="line"><span class="comment"># ls -l pushgateway</span></span><br><span class="line">lrwxrwxrwx 1 root root 29 Oct 13 14:22 pushgateway -&gt; pushgateway-1.4.3.linux-amd64</span><br><span class="line"><span class="comment">#cd pushgateway</span></span><br><span class="line"><span class="comment"># nohup ./pushgateway --help./pushgateway --web.listen-address=&quot;0.0.0.0:9091&quot; --persistence.file=&quot;/data/pushgateway&quot; &amp; </span></span><br><span class="line"><span class="comment"># ss -ntlp |grep 9091</span></span><br><span class="line">LISTEN   0         128                       *:9091                   *:*        <span class="built_in">users</span>:((<span class="string">&quot;pushgateway&quot;</span>,pid=5125,fd=3))</span><br><span class="line"></span><br><span class="line"><span class="comment">###容器部署</span></span><br><span class="line"><span class="comment"># docker load -i pushgateway.tar.gz</span></span><br><span class="line"><span class="comment"># docker run -d --name pushgateway -p 9091:9091 prom/pushgateway</span></span><br></pre></td></tr></table></figure><h3 id="6-3：prometheus-到-pushgateway-采集数据："><a href="#6-3：prometheus-到-pushgateway-采集数据：" class="headerlink" title="6.3：prometheus 到 pushgateway 采集数据："></a>6.3：prometheus 到 pushgateway 采集数据：</h3><h4 id="6-3-1：验证-pushgateway："><a href="#6-3-1：验证-pushgateway：" class="headerlink" title="6.3.1：验证 pushgateway："></a>6.3.1：验证 pushgateway：</h4><p>pushgateway自身带有metrics指标</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013223944880.jpg" alt="image-20221013223944880"></p><h4 id="6-3-2：prometheus-配置数据采集："><a href="#6-3-2：prometheus-配置数据采集：" class="headerlink" title="6.3.2：prometheus 配置数据采集："></a>6.3.2：prometheus 配置数据采集：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim prometheus-cfg.yaml</span></span><br><span class="line">  - job_name: <span class="string">&#x27;pushgateway-monitor&#x27;</span></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&#x27;192.168.3.60:9091&#x27;</span>]</span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#./promtool  check config prometheus.yml </span></span><br><span class="line">Checking prometheus.yml</span><br><span class="line">  SUCCESS: 2 rule files found</span><br><span class="line"> SUCCESS: prometheus.yml is valid prometheus config file syntax</span><br><span class="line"></span><br><span class="line"><span class="comment"># honor_labels 控制Prometheus如何处理已经存在于已抓取数据中的标签与Prometheus将附加服务器端的标签之间的冲突（&quot;job&quot;和&quot;instance&quot;标签，手动配置的目标标签以及服务发现实现生成的标签）。</span></span><br><span class="line"><span class="comment"># 如果 honor_labels 设置为&quot;true&quot;，则通过保留已抓取数据的标签值并忽略冲突的服务器端标签来解决标签冲突。</span></span><br><span class="line"><span class="comment"># 如 果 honor_labels 设 置 为 &quot;false&quot; ， 则 通 过 将 已 抓 取 数 据 中 的 冲 突 标 签 重 命 名 为 &quot;exported_ &lt;original-label&gt;&quot;（例如&quot;exported_instance&quot;，&quot;exported_job&quot;）然后附加服务器端标签来解决标签冲突</span></span><br><span class="line"><span class="comment">#这里设置为true保留原标签</span></span><br><span class="line">容器prometueus重新applyyaml文件</span><br><span class="line"><span class="comment"># kubectl apply -f prometheus-cfg.yaml &amp;&amp; kubectl delete -f prometheus-deploy.yaml &amp;&amp; kubectl apply -f prometheus-deploy.yaml</span></span><br><span class="line">二进制prometheus重启服务（开启了热加载也可通过热加载方式生效）</span><br><span class="line"><span class="comment">#systeemctl restart prometheus</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3：验证数据："><a href="#6-3-3：验证数据：" class="headerlink" title="6.3.3：验证数据："></a>6.3.3：验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013230016435.png" alt="image-20221013230016435"></p><h3 id="6-4：测试从客户端推送单条数据："><a href="#6-4：测试从客户端推送单条数据：" class="headerlink" title="6.4：测试从客户端推送单条数据："></a>6.4：测试从客户端推送单条数据：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">要 Push 数据到 PushGateway 中，可以通过其提供的 API 标准接口来添加，默认 URL 地址为：</span><br><span class="line">http://&lt;ip&gt;:9091/metrics/job/&lt;JOBNAME&gt;&#123;/&lt;LABEL_NAME&gt;/&lt;LABEL_VALUE&gt;&#125;，</span><br><span class="line">其中&lt;JOBNAME&gt;是必填项，为 job 标签值，后边可以跟任意数量的标签对，一般我们会添加一个</span><br><span class="line">instance/&lt;INSTANCE_NAME&gt;实例名称标签，来方便区分各个指标。</span><br><span class="line">推送一个 job 名称为 mytest_job，key 为 mytest_metric 值为 2022</span><br><span class="line"><span class="comment"># echo &quot;mytest_metric 2022&quot; | curl --data-binary @- http://192.168.3.60:9091/metrics/job/mytest_job</span></span><br><span class="line"><span class="comment"># echo &quot;mytest_metric 2026&quot; | curl --data-binary @- http://192.168.3.60:9091/metrics/job/mytest_job</span></span><br></pre></td></tr></table></figure><h4 id="6-4-2：pushgateway-验证数据："><a href="#6-4-2：pushgateway-验证数据：" class="headerlink" title="6.4.2：pushgateway 验证数据："></a>6.4.2：pushgateway 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013233006526.png" alt="image-20221013233006526"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">除了 mytest_metric 外，同时还新增了 push_time_seconds 和 push_failure_time_seconds 两个指标，</span><br><span class="line">这两个是 PushGateway 自动生成的指标, 分别用于记录指标数据的成功上传时间和失败上传时间。</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013233830439.png" alt="image-20221013233830439"></p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013234337270.png" alt="image-20221013234337270"></p><h3 id="6-5：测试从客户端推送多条数据："><a href="#6-5：测试从客户端推送多条数据：" class="headerlink" title="6.5：测试从客户端推送多条数据："></a>6.5：测试从客户端推送多条数据：</h3><h4 id="6-5-1：推送多条数据："><a href="#6-5-1：推送多条数据：" class="headerlink" title="6.5.1：推送多条数据："></a>6.5.1：推送多条数据：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat &lt;&lt;EOF | curl --data-binary @- http://192.168.3.60:9091/metrics/job/test_job/instance/192.168.3.60</span></span><br><span class="line"><span class="comment">#TYPE node_memory_usage gauge</span></span><br><span class="line">node_memory_usage 4311744512</span><br><span class="line"><span class="comment"># TYPE memory_total gauge</span></span><br><span class="line">node_memory_total 103481868288</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="6-5-2：pushgateway-验证数据："><a href="#6-5-2：pushgateway-验证数据：" class="headerlink" title="6.5.2：pushgateway 验证数据："></a>6.5.2：pushgateway 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013234825665.jpg" alt="image-20221013234825665"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#job可以理解为prometheus中的job，而job后添加label相当于添加了target，再往下则是指标数据</span></span><br><span class="line"><span class="comment">#pushgateway是被动接受数据，并且是prometheus server 主动拉取数据，相当于一个指标数据中转站</span></span><br></pre></td></tr></table></figure><h4 id="6-5-3：prometheus-server-验证数据："><a href="#6-5-3：prometheus-server-验证数据：" class="headerlink" title="6.5.3：prometheus server 验证数据："></a>6.5.3：prometheus server 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221013235303817.png" alt="image-20221013235303817"></p><h3 id="6-6：自定义收集数据："><a href="#6-6：自定义收集数据：" class="headerlink" title="6.6：自定义收集数据："></a>6.6：自定义收集数据：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat mem_monitor.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">total_memory=$(free |awk <span class="string">&#x27;/Mem/&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">used_memory=$(free |awk <span class="string">&#x27;/Mem/&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">job_name=<span class="string">&quot;custom_memory_monitor&quot;</span></span><br><span class="line">instance_name=`ifconfig ens33 | grep -w inet | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>` pushgateway_server=<span class="string">&quot;http://192.168.3.60:9091/metrics/job&quot;</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | curl --data-binary @- $&#123;pushgateway_server&#125;/$&#123;job_name&#125;/instance/$&#123;instance_name&#125;</span></span><br><span class="line"><span class="string">#TYPE custom_memory_total gauge</span></span><br><span class="line"><span class="string">custom_memory_total $total_memory</span></span><br><span class="line"><span class="string">#TYPE custom_memory_used gauge</span></span><br><span class="line"><span class="string">custom_memory_used $used_memory</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">分别在不同主机执行脚本，验证指标数据收集和推送：</span><br><span class="line"><span class="comment"># bash mem_monitor.sh</span></span><br></pre></td></tr></table></figure><h4 id="6-6-2：pushgateway-验证数据："><a href="#6-6-2：pushgateway-验证数据：" class="headerlink" title="6.6.2：pushgateway 验证数据："></a>6.6.2：pushgateway 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015163554591.png" alt="image-20221015163554591"></p><h4 id="6-6-3：prometheus-验证数据："><a href="#6-6-3：prometheus-验证数据：" class="headerlink" title="6.6.3：prometheus 验证数据："></a>6.6.3：prometheus 验证数据：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015192439458.png" alt="image-20221015192439458"></p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015192509035.png" alt="image-20221015192509035"></p><h3 id="6-7：删除数据："><a href="#6-7：删除数据：" class="headerlink" title="6.7：删除数据："></a>6.7：删除数据：</h3><p>先对一个组写入多个 instance 的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat &lt;&lt;EOF | curl --data-binary @- http://192.168.3.60:9091/metrics/job/test_job/instance/192.168.3.60</span></span><br><span class="line"><span class="comment">#TYPE node_memory_usage gauge</span></span><br><span class="line">node_memory_usage 4311744512</span><br><span class="line"><span class="comment"># TYPE memory_total gauge</span></span><br><span class="line">node_memory_total 103481868288</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#cat &lt;&lt;EOF | curl --data-binary @- http://192.168.3.60:9091/metrics/job/test_job/instance/192.168.3.11</span></span><br><span class="line"><span class="comment">#TYPE node_memory_usage gauge</span></span><br><span class="line">node_memory_usage 4311744512</span><br><span class="line"><span class="comment"># TYPE memory_total gauge</span></span><br><span class="line">node_memory_total 103481868288</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="6-7-1：通过-API-删除指定组内指定实例的数据："><a href="#6-7-1：通过-API-删除指定组内指定实例的数据：" class="headerlink" title="6.7.1：通过 API 删除指定组内指定实例的数据："></a>6.7.1：通过 API 删除指定组内指定实例的数据：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://192.168.3.60:9091/metrics/job/test_job/instance/192.168.3.11</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015195513190.png" alt="image-20221015195513190"></p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015200345407.png" alt="image-20221015200345407"></p><h2 id="七-prometheus-联邦："><a href="#七-prometheus-联邦：" class="headerlink" title="七.prometheus 联邦："></a>七.prometheus 联邦：</h2><p>Prometheus Server 环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192.168.3.60 <span class="comment">#主节点</span></span><br><span class="line">192.168.3.70 <span class="comment">#联邦节点 1</span></span><br><span class="line">192.168.3.71 <span class="comment">#联邦节点 2</span></span><br><span class="line"><span class="comment">#监控本节点</span></span><br><span class="line">192.168.3.70 <span class="comment">#node1，联邦节点 1 的目标采集服务器</span></span><br><span class="line">192.168.3.71 <span class="comment">#node2，#联邦节点 2 的目标采集服务器</span></span><br></pre></td></tr></table></figure><p>7.1：部署 prometheus server：</p><p>Prometheus 主 server 和 prometheus 联邦 server 分别部署 prometheus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pwd</span></span><br><span class="line">/apps</span><br><span class="line"><span class="comment"># tar xvf prometheus-2.32.1.linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># ln -sv /apps/prometheus-2.32.1.linux-amd64 /apps/prometheus</span></span><br><span class="line"><span class="string">&#x27;/apps/prometheus&#x27;</span> -&gt; <span class="string">&#x27;/apps/prometheus-2.32.1.linux-amd64&#x27;</span></span><br><span class="line"><span class="comment"># cd /apps/prometheus</span></span><br><span class="line"><span class="comment"># ll</span></span><br><span class="line">prometheus.yml <span class="comment">#配置文件</span></span><br><span class="line">prometheus <span class="comment">#prometheus 服务可执行程序</span></span><br><span class="line">promtool <span class="comment">#测试工具，用于检测配置 prometheus 配置文件、检测 metrics 数据等</span></span><br><span class="line">./promtool check config prometheus.yml</span><br><span class="line">Checking prometheus.yml</span><br><span class="line">SUCCESS: 0 rule files found</span><br><span class="line"><span class="comment"># vim /etc/systemd/system/prometheus.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Server</span><br><span class="line">Documentation=https://prometheus.io/docs/introduction/overview/</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">WorkingDirectory=/apps/prometheus/</span><br><span class="line">ExecStart=/apps/prometheus/prometheus --config.file=/apps/prometheus/prometheus.yml</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl restart prometheus</span></span><br><span class="line"><span class="comment"># systemctl enable prometheus</span></span><br></pre></td></tr></table></figure><h3 id="7-2：部署-node-exporter："><a href="#7-2：部署-node-exporter：" class="headerlink" title="7.2：部署 node_exporter："></a>7.2：部署 node_exporter：</h3><p>Node 节点(被监控节点)分别部署 node_exporter(exporter)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xvf node_exporter-1.3.1.linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># ln -sv /apps/node_exporter-1.3.1.linux-amd64 /apps/node_exporter</span></span><br><span class="line"><span class="string">&#x27;/apps/node_exporter&#x27;</span> -&gt; <span class="string">&#x27;/apps/node_exporter-1.3.1.linux-amd64&#x27;</span> </span><br><span class="line"><span class="comment"># vim /etc/systemd/system/node-exporter.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Node Exporter</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/apps/node_exporter/node_exporter</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl restart node-exporter &amp;&amp; systemctl enable</span></span><br><span class="line">node-exporter.service</span><br></pre></td></tr></table></figure><h3 id="7-3：配置联邦-server-监控-node-exporter："><a href="#7-3：配置联邦-server-监控-node-exporter：" class="headerlink" title="7.3：配置联邦 server 监控 node_exporter："></a>7.3：配置联邦 server 监控 node_exporter：</h3><p>分别在联邦节点 1 监控 node1，在联邦节点 2 监控 node2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Prometheus 联邦节点 1：</span><br><span class="line"><span class="comment"># vim /apps/prometheus/prometheus.yml</span></span><br><span class="line">- job_name: <span class="string">&quot;prometheus-node1&quot;</span> </span><br><span class="line">static_configs: </span><br><span class="line">- targets: [<span class="string">&quot;192.168.3.70:9100&quot;</span>]</span><br><span class="line"><span class="comment"># systemctl restart prometheus.service</span></span><br></pre></td></tr></table></figure><p>验证数据：</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015210247968.png" alt="image-20221015210247968"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Prometheus 联邦节点 2：</span><br><span class="line"># vim /apps/prometheus/prometheus.yml </span><br><span class="line">- job_name: &quot;prometheus-node2&quot; </span><br><span class="line">  static_configs:</span><br><span class="line">  - targets: [&quot;192.168.3.71:9100&quot;]</span><br><span class="line"># systemctl restart prometheus.service</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015210626053.png" alt="image-20221015210626053"></p><h3 id="7-4：prometheus-server-采集联邦-server："><a href="#7-4：prometheus-server-采集联邦-server：" class="headerlink" title="7.4：prometheus server 采集联邦 server："></a>7.4：prometheus server 采集联邦 server：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- job_name: <span class="string">&quot;prometheus&quot;</span> </span><br><span class="line">  <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27; </span></span><br><span class="line">  <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line">    static_configs: </span><br><span class="line">      - targets: [<span class="string">&quot;localhost:9090&quot;</span>] </span><br><span class="line">- job_name: <span class="string">&#x27;prometheus-federate-3.70&#x27;</span> </span><br><span class="line">    scrape_interval: 10s</span><br><span class="line">    honor_labels: <span class="literal">true</span></span><br><span class="line">    metrics_path: <span class="string">&#x27;/federate&#x27;</span> </span><br><span class="line">    params:</span><br><span class="line">      <span class="string">&#x27;match[]&#x27;</span>: </span><br><span class="line">         - <span class="string">&#x27;&#123;job=&quot;prometheus&quot;&#125;&#x27;</span></span><br><span class="line">         - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span> </span><br><span class="line">         - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span></span><br><span class="line">    static_configs: </span><br><span class="line">    - targets: </span><br><span class="line">      - <span class="string">&#x27;192.168.3.70:9090&#x27;</span> </span><br><span class="line">- job_name: <span class="string">&#x27;prometheus-federate-3.71&#x27;</span> </span><br><span class="line">  scrape_interval: 10s</span><br><span class="line">  honor_labels: <span class="literal">true</span></span><br><span class="line">  metrics_path: <span class="string">&#x27;/federate&#x27;</span></span><br><span class="line">  params:</span><br><span class="line">    <span class="string">&#x27;match[]&#x27;</span>: </span><br><span class="line">       - <span class="string">&#x27;&#123;job=&quot;prometheus&quot;&#125;&#x27;</span> </span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class="line">       - <span class="string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span> </span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: </span><br><span class="line">    - <span class="string">&#x27;192.168.3.71:9090&#x27;</span></span><br><span class="line">  <span class="comment"># systemctl restart prometheus.service</span></span><br></pre></td></tr></table></figure><h3 id="7-5：验证-prometheus-server："><a href="#7-5：验证-prometheus-server：" class="headerlink" title="7.5：验证 prometheus server："></a>7.5：验证 prometheus server：</h3><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015233447626.png" alt="image-20221015233447626"></p><h4 id="7-5-1：验证数据收集状态："><a href="#7-5-1：验证数据收集状态：" class="headerlink" title="7.5.1：验证数据收集状态："></a>7.5.1：验证数据收集状态：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015233818894.png" alt="image-20221015233818894"></p><h2 id="八：prometheus-存储系统："><a href="#八：prometheus-存储系统：" class="headerlink" title="八：prometheus 存储系统："></a>八：prometheus 存储系统：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Prometheus 有着非常高效的时间序列数据存储方法，每个采样数据仅仅占用3.5byte 左右空间，上百万条时间序列，30 秒间隔，保留 60 天，大概 200 多 G空间（引用官方 PPT）。</span><br></pre></td></tr></table></figure><h3 id="8-1：prometheus-本地存储简介："><a href="#8-1：prometheus-本地存储简介：" class="headerlink" title="8.1：prometheus 本地存储简介："></a>8.1：prometheus 本地存储简介：</h3><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015234248973.png" alt="image-20221015234248973"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，prometheus 将采集到的数据存储在本地的 TSDB 数据库中，路径默认为 prometheus 安装目录的 data 目录，数据写入过程为先把数据写入 wal 日志并放在内存，然后 2 小时后将内存数据保存至一个新的 block 块，同时再把新采集的数据写入内存并在 2 小时后再保存至一个新的 block 块，以此类推。</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015234953598.png" alt="image-20221015234953598"></p><h4 id="8-1-1：block-简介："><a href="#8-1-1：block-简介：" class="headerlink" title="8.1.1：block 简介："></a>8.1.1：block 简介：</h4><p>每个 block 为一个 data 目录中以 01 开头的存储目录，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -l /apps/prometheus/data/</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 13 11:25 01GF8HESAM3BQPS2M08FMQH593</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 13 23:00 01GF9S6YSYAH0CJAX630TD76KS</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 09:41 01GFDGA3AWGESPQ8EV2ACDXS5N</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 11:00 01GFDMT051QE10E3YKYZR78C5Z</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 11:00 01GFDMT2M3BVF8NSQHMXP02E28</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 13:00 01GFDVNQSG7SYGZNJRJW1KYJ2Z</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 15:00 01GFE2HETG3X5VVV814PR40A3S</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 15 15:00 chunks_head</span><br><span class="line">-rw-r--r-- 1 root root     0 Oct 15 14:13 lock</span><br><span class="line">-rw-r--r-- 1 root root 20001 Oct 15 15:50 queries.active</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 15 15:00 wal</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221015235129480.png" alt="image-20221015235129480"></p><h4 id="8-1-2：block-的特性："><a href="#8-1-2：block-的特性：" class="headerlink" title="8.1.2：block 的特性："></a>8.1.2：block 的特性：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block 会压缩、合并历史数据块，以及删除过期的块，随着压缩、合并，block 的数量会减少，在压缩过程中会发生三件事：定期执行压缩、合并小的 block 到大的 block、清理过期的块。</span><br></pre></td></tr></table></figure><p>每个块有 4 部分组成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># tree /apps/prometheus/data/01FQNCYZ0BPFA8AQDDZM1C5PRN/</span></span><br><span class="line">/apps/prometheus/data/01FQNCYZ0BPFA8AQDDZM1C5PRN/</span><br><span class="line">├── chunks</span><br><span class="line">│ └── 000001 <span class="comment">#数据目录,每个大小为 512MB 超过会被切分为多个</span></span><br><span class="line">├── index <span class="comment">#索引文件，记录存储的数据的索引信息，通过文件内的几个表来查找时序数据</span></span><br><span class="line">├── meta.json <span class="comment">#block 元数据信息，包含了样本数、采集数据数据的起始时间、压缩历史</span></span><br><span class="line">└── tombstones <span class="comment">#逻辑数据，主要记载删除记录和标记要删除的内容，删除标记，可在查询块时排除</span></span><br><span class="line">样本。</span><br></pre></td></tr></table></figure><h4 id="8-1-3：本地存储配置参数："><a href="#8-1-3：本地存储配置参数：" class="headerlink" title="8.1.3：本地存储配置参数："></a>8.1.3：本地存储配置参数：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--config.file=<span class="string">&quot;prometheus.yml&quot;</span> <span class="comment">#指定配置文件</span></span><br><span class="line">--web.listen-address=<span class="string">&quot;0.0.0.0:9090&quot;</span> <span class="comment">#指定监听地址</span></span><br><span class="line">--storage.tsdb.path=<span class="string">&quot;data/&quot;</span> <span class="comment">#指定数存储目录</span></span><br><span class="line">--storage.tsdb.retention.size=B, KB, MB, GB, TB, PB, EB <span class="comment">#指定 chunk 大小，默认 512MB</span></span><br><span class="line">--storage.tsdb.retention.time= <span class="comment">#数据保存时长，默认 15 天</span></span><br><span class="line">--query.timeout=2m <span class="comment">#最大查询超时时间</span></span><br><span class="line">-query.max-concurrency=20 <span class="comment">#最大查询并发数</span></span><br><span class="line">--web.read-timeout=5m <span class="comment">#最大空闲超时时间</span></span><br><span class="line">--web.max-connections=512 <span class="comment">#最大并发连接数</span></span><br><span class="line">--web.enable-lifecycle <span class="comment">#启用 API 动态加载配置功能</span></span><br></pre></td></tr></table></figure><h3 id="8-2：远端存储之–victoriametrics："><a href="#8-2：远端存储之–victoriametrics：" class="headerlink" title="8.2：远端存储之–victoriametrics："></a>8.2：远端存储之–victoriametrics：</h3><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016000035749.png" alt="image-20221016000035749"></p><h4 id="8-2-1：单机版部署："><a href="#8-2-1：单机版部署：" class="headerlink" title="8.2.1：单机版部署："></a>8.2.1：单机版部署：</h4><p>下载单机的部署包 victoria-metrics-amd64-v1.71.0.tar.gz：</p><h5 id="8-2-1-1：部署单机版："><a href="#8-2-1-1：部署单机版：" class="headerlink" title="8.2.1.1：部署单机版："></a>8.2.1.1：部署单机版：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xvf victoria-metrics-amd64-v1.71.0.tar.gz</span></span><br><span class="line">参数：</span><br><span class="line">-httpListenAddr=0.0.0.0:8428 <span class="comment">#监听地址及端口</span></span><br><span class="line">-storageDataPath <span class="comment">#VictoriaMetrics 将所有数据存储在此目录中，默认为执行启动 victoria 的当前目录下</span></span><br><span class="line">的 victoria-metrics-data 目录中。</span><br><span class="line">-retentionPeriod <span class="comment">#存储数据的保留，较旧的数据会自动删除，默认保留期为 1 个月，默认单位为 m(月)，</span></span><br><span class="line">支持的单位有 h (hour), d (day), w (week), y (year)。</span><br><span class="line"></span><br><span class="line"><span class="comment"># mv victoria-metrics-prod /usr/local/bin/</span></span><br><span class="line">service 启动文件：</span><br><span class="line"><span class="comment"># cat /etc/systemd/system/victoria-metrics-prod.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=For Victoria-metrics-prod Service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/victoria-metrics-prod -httpListenAddr=0.0.0.0:8428</span><br><span class="line">-storageDataPath=/data/victoria -retentionPeriod=3</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl restart victoria-metrics-prod.service</span></span><br><span class="line"><span class="comment"># systemctl enable victoria-metrics-prod.service</span></span><br></pre></td></tr></table></figure><p>验证 web 页面：</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016001252372.png" alt="image-20221016001252372"></p><h5 id="8-2-1-2：prometheus-设置："><a href="#8-2-1-2：prometheus-设置：" class="headerlink" title="8.2.1.2：prometheus 设置："></a>8.2.1.2：prometheus 设置：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. </span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line">remote_write: </span><br><span class="line">  - url: http://192.168.3.60:8428/api/v1/write</span><br></pre></td></tr></table></figure><h5 id="8-2-1-3：验证-VictoriaMetrics-数据："><a href="#8-2-1-3：验证-VictoriaMetrics-数据：" class="headerlink" title="8.2.1.3：验证 VictoriaMetrics 数据："></a>8.2.1.3：验证 VictoriaMetrics 数据：</h5><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016002854426.png" alt="image-20221016002854426"></p><h5 id="8-2-1-4：grafana-设置："><a href="#8-2-1-4：grafana-设置：" class="headerlink" title="8.2.1.4：grafana 设置："></a>8.2.1.4：grafana 设置：</h5><p>添加数据源：</p><p>类型为 prometheus，地址及端口为 VictoriaMetrics：</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016003220808.png" alt="image-20221016003220808"></p><p>导入指定模板：</p><p>8919</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016003309419.png" alt="image-20221016003309419"></p><h5 id="8-2-1-5：验证数据："><a href="#8-2-1-5：验证数据：" class="headerlink" title="8.2.1.5：验证数据："></a>8.2.1.5：验证数据：</h5><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016003437521.png" alt="image-20221016003437521"></p><h4 id="8-2-2：官方-docker-compsoe："><a href="#8-2-2：官方-docker-compsoe：" class="headerlink" title="8.2.2：官方 docker-compsoe："></a>8.2.2：官方 docker-compsoe：</h4><p><a href="https://github.com/VictoriaMetrics/VictoriaMetrics/tree/cluster/deployment/docker">https://github.com/VictoriaMetrics/VictoriaMetrics/tree/cluster/deployment/docker</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/VictoriaMetrics/VictoriaMetrics.git</span></span><br><span class="line"><span class="comment"># cd VictoriaMetrics/deployment/docker/</span></span><br><span class="line"><span class="comment"># ls -ltr</span></span><br><span class="line">total 2372</span><br><span class="line">-rw-r--r--  1 root root   12185 Oct 15 16:37 Makefile</span><br><span class="line">-rw-r--r--  1 root root   10739 Oct 15 16:37 LICENSE</span><br><span class="line">-rw-r--r--  1 root root    1007 Oct 15 16:37 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--  1 root root   10025 Oct 15 16:37 CODE_OF_CONDUCT_RU.md</span><br><span class="line">-rw-r--r--  1 root root    3352 Oct 15 16:37 CODE_OF_CONDUCT.md</span><br><span class="line">-rw-r--r--  1 root root     337 Oct 15 16:37 SECURITY.md</span><br><span class="line">-rw-r--r--  1 root root  170145 Oct 15 16:37 README.md</span><br><span class="line">-rw-r--r--  1 root root 1983704 Oct 15 16:37 VM_logo.zip</span><br><span class="line">drwxr-xr-x 15 root root    4096 Oct 15 16:37 app</span><br><span class="line">drwxr-xr-x  4 root root    4096 Oct 15 16:37 deployment</span><br><span class="line">drwxr-xr-x  2 root root    4096 Oct 15 16:37 dashboards</span><br><span class="line">-rw-r--r--  1 root root  155168 Oct 15 16:37 go.sum</span><br><span class="line">-rw-r--r--  1 root root    4733 Oct 15 16:37 go.mod</span><br><span class="line">-rw-r--r--  1 root root      55 Oct 15 16:37 errcheck_excludes.txt</span><br><span class="line">drwxr-xr-x  7 root root    4096 Oct 15 16:37 docs</span><br><span class="line">drwxr-xr-x  3 root root    4096 Oct 15 16:37 snap</span><br><span class="line">drwxr-xr-x  3 root root    4096 Oct 15 16:37 ports</span><br><span class="line">drwxr-xr-x  5 root root    4096 Oct 15 16:37 package</span><br><span class="line">-rw-r--r--  1 root root   15445 Oct 15 16:37 logo.png</span><br><span class="line">drwxr-xr-x 53 root root    4096 Oct 15 16:37 lib</span><br><span class="line">drwxr-xr-x  9 root root    4096 Oct 15 16:37 vendor</span><br></pre></td></tr></table></figure><h4 id="8-2-3：集群版部署："><a href="#8-2-3：集群版部署：" class="headerlink" title="8.2.3：集群版部署："></a>8.2.3：集群版部署：</h4><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016003715255.png" alt="image-20221016003715255"></p><h5 id="8-2-3-1：组件介绍："><a href="#8-2-3-1：组件介绍：" class="headerlink" title="8.2.3.1：组件介绍："></a>8.2.3.1：组件介绍：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vminsert <span class="comment">#写入组件(写)，vminsert 负责接收数据写入并根据对度量名称及其所有标签的一致 hash 结果将数据分散写入不同的后端 vmstorage 节点之间 vmstorage，vminsert 默认端口 8480</span></span><br><span class="line">vmstorage <span class="comment">#存储原始数据并返回给定时间范围内给定标签过滤器的查询数据，默认端口 8482</span></span><br><span class="line">vmselect <span class="comment">#查询组件(读)，连接 vmstorage ，默认端口 8481</span></span><br><span class="line">其它可选组件：</span><br><span class="line">vmagent <span class="comment">#是一个很小但功能强大的代理，它可以从 node_exporter 各种来源收集度量数据，并将它们</span></span><br><span class="line">存储在 VictoriaMetrics 或任何其他支持远程写入协议的与 prometheus 兼容的存储系统中，有替代</span><br><span class="line">prometheus server 的意向。</span><br></pre></td></tr></table></figure><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016004147887.png" alt="image-20221016004147887"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmalert： 替换 prometheus server，以 VictoriaMetrics 为数据源，基于兼容 prometheus 的告警规则，判断数据是否异常，并将产生的通知发送给 alertermanager</span><br><span class="line">Vmgateway： 读写 VictoriaMetrics 数据的代理网关，可实现限速和访问控制等功能，目前为企业版组件</span><br><span class="line">vmctl： VictoriaMetrics 的命令行工具，目前主要用于将 prometheus、opentsdb 等数据源的数据迁移到VictoriaMetrics。</span><br></pre></td></tr></table></figure><p>下载：</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016004346902.png" alt="image-20221016004346902"></p><h5 id="8-2-3-2：部署集群："><a href="#8-2-3-2：部署集群：" class="headerlink" title="8.2.3.2：部署集群："></a>8.2.3.2：部署集群：</h5><p>分别在各个 VictoriaMetrics 服务器进行安装配置：</p><p>#8480-8482的监听端口负责http请求连接，8400-8401的端口是在vmstorage上，即vmstorage组件上有8400负责接收vminsert的数据持久化写请求，8401负责接收来自vmselect组件的查询请求，还有8482负责接收http请求，vmstorage组件上有三个端口，vmselect和vminsert上各有一个请求端口（8480和8481）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xvf victoria-metrics-amd64-v1.71.0-cluster.tar.gz</span></span><br><span class="line">vminsert-prod</span><br><span class="line">vmselect-prod</span><br><span class="line">vmstorage-prod</span><br><span class="line"><span class="comment"># mv vminsert-prod vmselect-prod vmstorage-prod /usr/local/bin/</span></span><br><span class="line">主要参数：</span><br><span class="line">-httpListenAddr string</span><br><span class="line">Address to listen <span class="keyword">for</span> http connections (default <span class="string">&quot;:8482&quot;</span>) -vminsertAddr string</span><br><span class="line">TCP address to accept connections from vminsert services (default <span class="string">&quot;:8400&quot;</span>) -vmselectAddr string</span><br><span class="line">TCP address to accept connections from vmselect services (default <span class="string">&quot;:8401&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="8-2-3-2-1：部署-vmstorage-prod-组件："><a href="#8-2-3-2-1：部署-vmstorage-prod-组件：" class="headerlink" title="8.2.3.2.1：部署 vmstorage-prod 组件："></a>8.2.3.2.1：部署 vmstorage-prod 组件：</h6><p>负责数据的持久化，监听端口:API 8482 ,数据写入端口：8400，数据读取端口：8401。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/vmstorage.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Vmstorage Server</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">WorkingDirectory=/tmp</span><br><span class="line">ExecStart=/usr/local/bin/vmstorage-prod -loggerTimezone Asia/Shanghai -storageDataPath   /data/vmstorage-data -httpListenAddr :8482 -vminsertAddr :8400 -vmselectAddr :8401</span><br><span class="line">[Install]WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl restart vmstorage.service</span></span><br><span class="line"><span class="comment"># systemctl enable vmstorage.service</span></span><br><span class="line"><span class="comment"># systemctl status vmstorage.service</span></span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vmstorage.service</span></span><br><span class="line">192.168.3.71:/etc/systemd/system/vmstorage.service</span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vmstorage.service</span></span><br><span class="line">192.168.3.72:/etc/systemd/system/vmstorage.service</span><br><span class="line"><span class="comment"># scp /usr/local/bin/vm* 192.168.3.71:/usr/local/bin/</span></span><br><span class="line"><span class="comment"># scp /usr/local/bin/vm* 192.168.3.72:/usr/local/bin/</span></span><br><span class="line">182:</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl start vmstorage &amp;&amp; systemctl enable vmstorage</span></span><br><span class="line">183:</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl start vmstorage &amp;&amp; systemctl enable vmstorage</span></span><br></pre></td></tr></table></figure><h6 id="8-2-3-2-2：部署-vminsert-prod-组件："><a href="#8-2-3-2-2：部署-vminsert-prod-组件：" class="headerlink" title="8.2.3.2.2：部署 vminsert-prod 组件："></a>8.2.3.2.2：部署 vminsert-prod 组件：</h6><p>接收外部的写请求，默认端口 8480。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/vminsert.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Vminsert Server</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">WorkingDirectory=/tmp</span><br><span class="line">ExecStart=/usr/local/bin/vminsert-prod -httpListenAddr :8480</span><br><span class="line">-storageNode=192.168.3.70:8400,192.168.3.71:8400,192.168.3.72:8400</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl restart vminsert &amp;&amp; systemctl enable vminsert</span></span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vminsert.service 192.168.3.71:/etc/systemd/system/vminsert.service</span></span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vminsert.service 192.168.3.72:/etc/systemd/system/vminsert.service</span></span><br></pre></td></tr></table></figure><h6 id="8-2-3-2-3：部署-vmselect-prod-组件："><a href="#8-2-3-2-3：部署-vmselect-prod-组件：" class="headerlink" title="8.2.3.2.3：部署 vmselect-prod 组件："></a>8.2.3.2.3：部署 vmselect-prod 组件：</h6><p>负责接收外部的读请求，默认端口 8481。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/vmselect.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Vminsert Server</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">WorkingDirectory=/tmp</span><br><span class="line">ExecStart=/usr/local/bin/vmselect-prod -httpListenAddr :8481</span><br><span class="line">-storageNode=192.168.3.70:8401,192.168.3.71:8401,192.168.3.72:8401</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl restart vmselect &amp;&amp; systemctl enable vmselect</span></span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vmselect.service 192.168.3.71:/etc/systemd/system/vmselect.service</span></span><br><span class="line"><span class="comment"># scp /etc/systemd/system/vmselect.service 192.168.3.72:/etc/systemd/system/vmselect.service</span></span><br><span class="line">182:</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart vmselect &amp;&amp; systemctl <span class="built_in">enable</span> vmselect</span><br><span class="line">183:</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart vmselect &amp;&amp; systemctl <span class="built_in">enable</span> vmselect</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="8-2-3-2-4：验证服务端口："><a href="#8-2-3-2-4：验证服务端口：" class="headerlink" title="8.2.3.2.4：验证服务端口："></a>8.2.3.2.4：验证服务端口：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">192.168.3.70：</span><br><span class="line"><span class="comment"># curl http://192.168.3.70:8480/metrics</span></span><br><span class="line"><span class="comment"># curl http://192.168.3.70:8481/metrics</span></span><br><span class="line"><span class="comment"># curl http://192.168.3.70:8482/metrics</span></span><br><span class="line">192.168.3.71：</span><br><span class="line">curl http://192.168.3.71:8480/metrics</span><br><span class="line">curl http://192.168.3.71:8481/metrics</span><br><span class="line">curl http://192.168.3.71:8482/metrics</span><br><span class="line">192.168.3.72：</span><br><span class="line">curl http://192.168.3.72:8480/metrics</span><br><span class="line">curl http://192.168.3.72:8481/metrics</span><br><span class="line">curl http://192.168.3.72:8482/metrics</span><br></pre></td></tr></table></figure><h5 id="8-2-3-4：prometheus-配置远程写入"><a href="#8-2-3-4：prometheus-配置远程写入" class="headerlink" title="8.2.3.4：prometheus 配置远程写入:"></a>8.2.3.4：prometheus 配置远程写入:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global configglobal:</span></span><br><span class="line">scrape_interval: 15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). </span></span><br><span class="line"><span class="comment">#单机写入</span></span><br><span class="line"><span class="comment">#remote_write:</span></span><br><span class="line"><span class="comment"># - url: http://172.31.7.109:8428/api/v1/write</span></span><br><span class="line"><span class="comment">#集群写入</span></span><br><span class="line">remote_write:</span><br><span class="line">  - url: http://192.168.3.70:8480/insert/0/prometheus</span><br><span class="line">  - url: http://192.168.3.71:8480/insert/0/prometheus</span><br><span class="line">  - url: http://192.168.3.72:8480/insert/0/prometheus</span><br><span class="line"><span class="comment">#systemctl restart promethtus.service </span></span><br></pre></td></tr></table></figure><h5 id="8-2-3-5：grafana-数据源配置："><a href="#8-2-3-5：grafana-数据源配置：" class="headerlink" title="8.2.3.5：grafana 数据源配置："></a>8.2.3.5：grafana 数据源配置：</h5><p><a href="https://github.com/VictoriaMetrics/VictoriaMetrics#grafana-setup">https://github.com/VictoriaMetrics/VictoriaMetrics#grafana-setup</a></p><h5 id="8-2-3-6：添加数据源："><a href="#8-2-3-6：添加数据源：" class="headerlink" title="8.2.3.6：添加数据源："></a>8.2.3.6：添加数据源：</h5><p><a href="http://192.168.3.70:8481/select/0/prometheus">http://192.168.3.70:8481/select/0/prometheus</a></p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016161520021.png" alt="image-20221016161520021"></p><p>导入指定模板：<br>8919</p><p><img src="/2022/10/12/prometheus%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B8%8B/image-20221016162452117.png" alt="image-20221016162452117"></p><h4 id="8-2-4：开启数据复制："><a href="#8-2-4：开启数据复制：" class="headerlink" title="8.2.4：开启数据复制："></a>8.2.4：开启数据复制：</h4><p><a href="https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#replication-and-data-safety">https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#replication-and-data-safety</a><br>默认情况下，数据被 vminsert 的组件基于 hash 算法分别将数据持久化到不同的vmstorage 节点，可以启用 vminsert 组件支持的-replicationFactor&#x3D;N 复制功能，将数据分别在各节点保存一份完整的副本以实现数据的高可用。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/12/hello-world/"/>
      <url>/2022/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
